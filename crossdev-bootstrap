#!/bin/bash

CD_USE_VER="host"
CD_CROSSDEV_EMERGE_ARGS=()

CD_CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

source "${CD_CUR_DIR}/crossdev-functions.sh"

cd_parse_arguments $@

cd_parse_extra_arguments() {

  while (( ${#1} )); do
    case ${1} in
      *-cd-use-rpi)
      CD_USE_RPI=1
      ;;
      *-cd-use-musl)
      CD_USE_LIBC="musl"
      ;;
      *-cd-use-glibc)
      CD_USE_LIBC="glibc"
      ;;
      *-cd-use-ver-host)
      CD_USE_VER="host"
      ;;
      *-cd-use-ver-target)
      CD_USE_VER="target"
      ;;
      *-cd-gcc-ver)
      shift; CD_GCC_VER="${1}"
      ;;
      *-cd-gcc-ver=*)
      CD_GCC_VER="${1#*=}"
      ;;
      *-cd-libc-ver)
      shift; CD_LIBC_VER="${1}"
      ;;
      *-cd-libc-ver=*)
      CD_LIBC_VER="${1#*=}"
      ;;
      *-cd-kernel-ver)
      shift; CD_KERNEL_VER="${1}"
      ;;
      *-cd-kernel-ver=*)
      CD_KERNEL_VER="${1#*=}"
      ;;
      *-cd-binutils-ver)
      shift; CD_BINUTILS_VER="${1}"
      ;;
      *-cd-binutils-ver=*)
      CD_BINUTILS_VER="${1#*=}"
      ;;
      --)
      shift;
      while (( ${#@} )); do
        CD_CROSSDEV_EMERGE_ARGS+=(${1})
        shift
      done
      break
      ;;
      *)
      CD_CROSSDEV_EMERGE_ARGS+=(${1})
      ;;
    esac
    shift
  done

}

cd_parse_extra_arguments "${CD_ARGS[@]}"

if [ ! -z "${CD_HELP}" ]; then
  cd_print_usage_header
  echo "--cd-use-rpi (Use RPi supported kernel)"
  echo "--cd-use-musl (Use musl as the libc)"
  echo "--cd-use-glibc (Use glibc as the libc)"
  echo "--cd-gcc-ver <version> (Override GCC version to use)"
  echo "--cd-libc-ver <version> (Override libc version to use)"
  echo "--cd-kernel-ver <version> (Override kernel version to use)"
  echo "--cd-binutils-ver <version> (Override binutils version to use)"
  echo "--cd-use-ver-target (Use same versions as on target)"
  echo "--cd-use-ver-host (Use same versions as on host)"
  exit 1
fi

if [ "${CD_USE_VER}" == "host" ]; then
  CD_GET_PACKAGE_DIR="${CD_PREFIX_DIR}"
  einfo "Basing on host package versions"
fi

if [ "${CD_USE_VER}" == "target" ]; then
  CD_GET_PACKAGE_DIR="${CD_TARGET_DIR}"
  einfo "Basing on target package versions"
fi

if [ -z "${CD_USE_LIBC}" ]; then
  CD_HAS_MUSL=$(cd_get_package_version_by_atom "${CD_GET_PACKAGE_DIR}" "%{PVR}" "sys-libs/musl")
  if [ ! -z "${CD_HAS_MUSL}" ]; then
    CD_USE_LIBC="musl"
  fi
  CD_HAS_GLIBC=$(cd_get_package_version_by_atom "${CD_GET_PACKAGE_DIR}" "%{PVR}" "sys-libs/glibc")
  if [ ! -z "${CD_HAS_GLIBC}" ]; then
    CD_USE_LIBC="glibc"
  fi
fi

CD_CROSSDEV_EMERGE_ARGS+=("sys-apps/baselayout")

CD_CROSSDEV_EMERGE_ARGS+=("virtual/libc")
if [ "${CD_USE_LIBC}" == "musl" ]; then
  if [ ! -z "${CD_LIBC_VER}" ]; then
    einfo "Using musl version: ${CD_LIBC_VER}";
    CD_CROSSDEV_EMERGE_ARGS+=("sys-libs/musl-${CD_LIBC_VER}")
  else
    CD_LIBC_VER=$(cd_get_package_version_by_atom "${CD_GET_PACKAGE_DIR}" "%{PVR}" "sys-libs/musl")
    if [ ! -z "${CD_LIBC_VER}" ]; then
      einfo "No musl version specified, using: ${CD_LIBC_VER}";
      CD_CROSSDEV_EMERGE_ARGS+=("sys-libs/musl-${CD_LIBC_VER}")
    else
      einfo "No musl version specified, using latest";
      CD_CROSSDEV_EMERGE_ARGS+=("sys-libs/musl")
    fi
  fi
fi
if [ "${CD_USE_LIBC}" == "glibc" ]; then
  if [ ! -z "${CD_LIBC_VER}" ]; then
    einfo "Using glibc version: ${CD_LIBC_VER}";
    CD_CROSSDEV_EMERGE_ARGS+=("=sys-libs/glibc-${CD_LIBC_VER}")
  else
    CD_LIBC_VER=$(cd_get_package_version_by_atom "${CD_GET_PACKAGE_DIR}" "%{PVR}" "sys-libs/glibc")
    if [ ! -z "${CD_LIBC_VER}" ]; then
      einfo "No glibc version specified, using: ${CD_LIBC_VER}";
      CD_CROSSDEV_EMERGE_ARGS+=("=sys-libs/glibc-${CD_LIBC_VER}")
    else
      einfo "No glibc version specified, using latest";
      CD_CROSSDEV_EMERGE_ARGS+=("sys-libs/glibc")
    fi
  fi
fi

CD_CROSSDEV_EMERGE_ARGS+=("virtual/os-headers")
if [ ! -z "${CD_KERNEL_VER}" ]; then
  einfo "Using kernel version: ${CD_KERNEL_VER}";
  CD_CROSSDEV_EMERGE_ARGS+=("=sys-kernel/linux-headers-${CD_KERNEL_VER}")
else
  if [ ! -z "${CD_USE_RPI}" ]; then
    CD_KERNEL_VER="4.19"
    einfo "Using rpi kernel version: ${CD_KERNEL_VER}";
    CD_CROSSDEV_EMERGE_ARGS+=("=sys-kernel/linux-headers-${CD_KERNEL_VER}")
  else
    CD_KERNEL_VER=$(cd_get_package_version_by_atom "${CD_GET_PACKAGE_DIR}" "%{PVR}" "sys-kernel/linux-headers")
    if [ ! -z "${CD_KERNEL_VER}" ]; then
      einfo "No kernel version specified, using: ${CD_KERNEL_VER}";
      CD_CROSSDEV_EMERGE_ARGS+=("=sys-kernel/linux-headers-${CD_KERNEL_VER}")
    else
      einfo "No kernel version specified, using latest";
      CD_CROSSDEV_EMERGE_ARGS+=("sys-kernel/linux-headers")
    fi
  fi
fi

if [ ! -z "${CD_GCC_VER}" ]; then
  einfo "Using gcc version: ${CD_GCC_VER}";
  CD_CROSSDEV_EMERGE_ARGS+=("=sys-devel/gcc-${CD_GCC_VER}")
else
  CD_GCC_VER=$(cd_get_package_version_by_path "${CD_GET_PACKAGE_DIR}" "%{PVR}" "/usr/bin/gcc")
  if [ ! -z "${CD_GCC_VER}" ]; then
    einfo "No gcc version specified, using: ${CD_GCC_VER}";
    CD_CROSSDEV_EMERGE_ARGS+=("=sys-devel/gcc-${CD_GCC_VER}")
  else
    einfo "No gcc version specified, using latest";
    CD_CROSSDEV_EMERGE_ARGS+=("sys-devel/gcc")
  fi
fi

if [ ! -z "${CD_BINUTILS_VER}" ]; then
  einfo "Using binutils version: ${CD_BINUTILS_VER}";
  CD_CROSSDEV_EMERGE_ARGS+=("=sys-devel/binutils-${CD_BINUTILS_VER}")
else
  CD_BINUTILS_VER=$(cd_get_package_version_by_path "${CD_GET_PACKAGE_DIR}" "%{PVR}" "/usr/bin/ld")
  if [ ! -z "${CD_BINUTILS_VER}" ]; then
    einfo "No binutils version specified, using: ${CD_BINUTILS_VER}";
    CD_CROSSDEV_EMERGE_ARGS+=("=sys-devel/binutils-${CD_BINUTILS_VER}")
  else
    einfo "No binutils version specified, using latest";
    CD_CROSSDEV_EMERGE_ARGS+=("sys-devel/binutils")
  fi
fi

CD_PYTHON_VERS=$(cd_portageq "${CD_TARGET_DIR}" envvar USE_PYTHON)
if [ ! -z "${CD_PYTHON_VERS}" ]; then
  einfo "Using python versions (from target profile): ${CD_PYTHON_VERS}";
else
  CD_PYTHON_VERS=$(cd_portageq "${CD_PREFIX_DIR}" envvar USE_PYTHON)
  if [ ! -z "${CD_PYTHON_VERS}" ]; then
    einfo "Using python versions (from host profile): ${CD_PYTHON_VERS}";
  else
    eerror "Cannot find any python versions in host or target profile"
    exit 1
  fi
fi
for CD_PYTHON_VER in ${CD_PYTHON_VERS}; do
  CD_CROSSDEV_EMERGE_ARGS+=("=dev-lang/python-${CD_PYTHON_VER}*")
done

if [ -f "${CD_CONFIG_DIR}/crossdev-bootstrap-pre" ]; then
  ebegin "Executing crossdev bootstrap pre hook"
  source "${CD_CONFIG_DIR}/crossdev-bootstrap-pre" || cd_die
  eend 0
fi

ebegin "Writing package.mask to ${CD_TARGET_DIR}/etc/portage"
mkdir -p "${CD_TARGET_DIR}/etc/portage/package.mask/" || cd_die

if [ ! -z "${CD_GCC_VER}" ]; then
cat << EOF > "${CD_TARGET_DIR}/etc/portage/package.mask/gcc"
>sys-devel/gcc-${CD_GCC_VER}
<sys-devel/gcc-${CD_GCC_VER}
EOF
fi

if [ ! -z "${CD_LIBC_VER}" ]; then

if [ "${CD_USE_LIBC}" == "musl" ]; then
cat << EOF > "${CD_TARGET_DIR}/etc/portage/package.mask/musl"
>sys-libs/musl-${CD_LIBC_VER}
<sys-libs/musl-${CD_LIBC_VER}
EOF
fi

if [ "${CD_USE_LIBC}" == "glibc" ]; then
cat << EOF > "${CD_TARGET_DIR}/etc/portage/package.mask/glibc"
>sys-libs/glibc-${CD_LIBC_VER}
<sys-libs/glibc-${CD_LIBC_VER}
EOF
fi

fi

if [ ! -z "${CD_BINUTILS_VER}" ]; then
cat << EOF > "${CD_TARGET_DIR}/etc/portage/package.mask/binutils"
>sys-devel/binutils-${CD_BINUTILS_VER}
<sys-devel/binutils-${CD_BINUTILS_VER}
EOF
fi

if [ ! -z "${CD_KERNEL_VER}" ]; then
cat << EOF > "${CD_TARGET_DIR}/etc/portage/package.mask/linux-headers"
>sys-kernel/linux-headers-${CD_KERNEL_VER}
<sys-kernel/linux-headers-${CD_KERNEL_VER}
EOF
fi

eend 0

ebegin "Starting crossdev emerge with: ${CD_CROSSDEV_EMERGE_ARGS[*]}"
"${CD_SCRIPT_DIR}/crossdev-emerge" --ask --tree --usepkg-exclude="*" "${CD_CROSSDEV_EMERGE_ARGS[@]}" || cd_die
eend 0

ebegin "Linking lib64 dirs to lib dirs, if possible"
ln -fs ./lib "${CD_TARGET_DIR}/usr/lib64"
ln -fs ./lib "${CD_TARGET_DIR}/lib64"
eend 0

if [ -f "${CD_CONFIG_DIR}/crossdev-bootstrap-post" ]; then
  ebegin "Executing crossdev bootstrap post hook"
  source "${CD_CONFIG_DIR}/crossdev-bootstrap-post" || cd_die
  eend 0
fi
