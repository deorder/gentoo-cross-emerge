#!/bin/bash

CD_USE_DTB="upstream"
CD_FIRMWARE_GIT_BRANCH="stable"
CD_KERNEL_GIT_BRANCH="rpi-4.19.y"
CD_CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

source "${CD_CUR_DIR}/crossdev-functions.sh"

cd_parse_arguments $@

cd_parse_extra_arguments() {

  while (( ${#1} )); do
    case ${1} in
      *-cd-use-rpi=*)
      CD_USE_RPI="${1#*=}"
      ;;
      *-cd-use-rpi)
      shift; CD_USE_RPI=${1}
      ;;
      *-cd-git-root=*)
      CD_GIT_ROOT="${1#*=}"
      ;;
      *-cd-git-root)
      shift; CD_GIT_ROOT=${1}
      ;;
      *-cd-kernel-menu)
      CD_KERNEL_MENU=1
      ;;
      *-cd-kernel-clean)
      CD_KERNEL_CLEAN=1
      ;;
      *-cd-kernel-arch=*)
      CD_KERNEL_ARCH="${1#*=}"
      ;;
      *-cd-kernel-arch)
      shift; CD_KERNEL_ARCH=${1}
      ;;
      *-cd-kernel-config=*)
      CD_KERNEL_CONFIG="${1#*=}"
      ;;
      *-cd-kernel-config)
      shift; CD_KERNEL_CONFIG=${1}
      ;;
      *-cd-kernel-git-root=*)
      CD_KERNEL_GIT_ROOT="${1#*=}"
      ;;
      *-cd-kernel-git-root)
      shift; CD_KERNEL_GIT_ROOT=${1}
      ;;
      *-cd-firmware-git-root=*)
      CD_FIRMWARE_GIT_ROOT="${1#*=}"
      ;;
      *-cd-firmware-git-root)
      shift; CD_FIRMWARE_GIT_ROOT=${1}
      ;;
      *-cd-kernel-git-branch=*)
      CD_KERNEL_GIT_BRANCH="${1#*=}"
      ;;
      *-cd-kernel-git-branch)
      shift; CD_KERNEL_GIT_BRANCH=${1}
      ;;
      *-cd-firmware-branch=*)
      CD_FIRMWARE_GIT_BRANCH="${1#*=}"
      ;;
      *-cd-firmware-branch)
      shift; CD_FIRMWARE_GIT_BRANCH=${1}
      ;;
      *-cd-use-downstream-dtb)
      CD_USE_DTB="downstream"
      ;;
      *-cd-use-upstream-dtb)
      CD_USE_DTB="upstream"
      ;;
    esac
    shift
  done

  if [ -z "${CD_GIT_ROOT}" ]; then
    CD_GIT_ROOT=${CD_TMP_DIR}
  fi

  if [ -z "${CD_KERNEL_GIT_ROOT}" ]; then
    CD_KERNEL_GIT_ROOT=${CD_GIT_ROOT}
  fi

  if [ -z "${CD_FIRMWARE_GIT_ROOT}" ]; then
    CD_FIRMWARE_GIT_ROOT=${CD_GIT_ROOT}
  fi

  if [ -z "${CD_USE_RPI}" ]; then
    if [ "${CD_KERNEL_ARCH}" == "arm" ]; then
      CD_USE_RPI="rpi1"
    fi
    if [ "${CD_KERNEL_ARCH}" == "arm64" ]; then
      CD_USE_RPI="rpi3"
    fi
  fi

  if [ -z "${CD_KERNEL_ARCH}" ]; then
    eerror "No kernel arch specified, use --cd-kernel-arch";
    CD_HELP=1
  fi

}

cd_parse_extra_arguments "${CD_ARGS[@]}"

if [ ! -z "${CD_HELP}" ]; then
  cd_print_usage_header
  echo "--cd-kernel-menu (Show kernel menu)"
  echo "--cd-kernel-clean (Clean kernel build)"
  echo "--cd-kernel-config <path> (Kernel config)"
  echo "--cd-kernel-arch <arch> (Architecture to build kernel for)"
  echo "--cd-use-downstream-dtb (Install downstream / official dtb files)"
  echo "--cd-use-upstream-dtb (Install upstream / linux dtb files)"
  echo "--cd-firmware-git-root <dir> (Firmware repository git root dir)"
  echo "--cd-kernel-git-root <dir> (Kernel repository git root dir)"
  echo "--cd-firmware-git-branch <name> (Firmware branch)"
  echo "--cd-kernel-git-branch <name> (Kernel branch)"
  echo "--cd-git-root <dir> (Repository git root dir)"
  echo "--cd-use-rpi <name> (Which RPi to target)"
  exit 1
fi

if [ -d "${CD_TARGET_DIR}" ]; then

  if [ ! -z "${CD_USE_RPI}" ]; then
    einfo "Targeting rpi: ${CD_USE_RPI}";
  fi
  if [ ! -z "${CD_USE_DTB}" ]; then
    einfo "Using dtb from: ${CD_USE_DTB}";
  fi
  if [ ! -z "${CD_KERNEL_ARCH}" ]; then
    einfo "Using kernel arch: ${CD_KERNEL_ARCH}";
  fi
  if [ ! -z "${CD_KERNEL_GIT_BRANCH}" ]; then
    einfo "Using kernel branch: ${CD_KERNEL_GIT_BRANCH}";
  fi
  if [ ! -z "${CD_FIRMWARE_GIT_BRANCH}" ]; then
    einfo "Using firmware branch: ${CD_FIRMWARE_GIT_BRANCH}";
  fi
  if [ ! -z "${CD_KERNEL_CONFIG}" ]; then
    einfo "Using kernel config: ${CD_KERNEL_CONFIG}";
  fi
  
  ebegin "Creating directories that are still missing"
  mkdir -p ${CD_NODEBUG:--v} "${CD_TARGET_DIR}"/{boot/overlays,lib/firmware} || cd_die
  eend 0

  if [ ! -d "${CD_KERNEL_GIT_ROOT}/rpi-kernel" ]; then
    ebegin "Cloning kernel repository to ${CD_KERNEL_GIT_ROOT}/rpi-kernel (${CD_KERNEL_GIT_BRANCH})"
    mkdir -p ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}" || cd_die
    git clone --single-branch --branch "${CD_KERNEL_GIT_BRANCH}" --depth=1 https://github.com/raspberrypi/linux.git "${CD_KERNEL_GIT_ROOT}/rpi-kernel" || cd_die
    eend 0
  fi
  if [ -d "${CD_KERNEL_GIT_ROOT}/rpi-kernel" ]; then

    if [ ! -z "${CD_KERNEL_CLEAN}" ]; then
      ebegin "Cleaning kernel repository in ${CD_KERNEL_GIT_ROOT}/rpi-kernel (${CD_KERNEL_GIT_BRANCH})"
      #pushd "${CD_KERNEL_GIT_ROOT}/rpi-kernel"
      #ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make distclean || cd_die
      #popd
      git --git-dir="${CD_KERNEL_GIT_ROOT}/rpi-kernel/.git" --work-tree="${CD_KERNEL_GIT_ROOT}/rpi-kernel" clean -d -x -f || cd_die
      git --git-dir="${CD_KERNEL_GIT_ROOT}/rpi-kernel/.git" --work-tree="${CD_KERNEL_GIT_ROOT}/rpi-kernel" reset --hard ${CD_KERNEL_GIT_BRANCH} || cd_die
      eend 0

      ebegin "Updating kernel repository in ${CD_KERNEL_GIT_ROOT}/rpi-kernel (${CD_KERNEL_GIT_BRANCH})"
      git --git-dir="${CD_KERNEL_GIT_ROOT}/rpi-kernel/.git" --work-tree="${CD_KERNEL_GIT_ROOT}/rpi-kernel" pull || cd_die
      eend 0
    else
      einfo "Not cleaning kernel repository"
    fi

    ebegin "Configuring kernel in ${CD_KERNEL_GIT_ROOT}/rpi-kernel for ${CD_USE_RPI}"
    if [ -z "${CD_KERNEL_CONFIG}" ]; then
      pushd "${CD_KERNEL_GIT_ROOT}/rpi-kernel"
      if [ "${CD_KERNEL_ARCH}" == "arm" ]; then
        case ${CD_USE_RPI} in
          *)
          ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make bcmrpi_defconfig || cd_die
          ewarn "No default kernel configuration for ${CD_KERNEL_ARCH} and ${CD_USE_RPI} found, using default"
          ;;
        esac
      fi
      if [ "${CD_KERNEL_ARCH}" == "arm64" ]; then
        case ${CD_USE_RPI} in
          *3*)
          ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make bcmrpi3_defconfig || cd_die
          ;;
          *)
          ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make defconfig || cd_die
          ewarn "No default kernel configuration for ${CD_KERNEL_ARCH} and ${CD_USE_RPI} found, using default"
          ;;
        esac
      fi
      popd
    else
      ebegin "Copying kernel config ${CD_KERNEL_CONFIG} to ${CD_KERNEL_GIT_ROOT}/rpi-kernel"
      cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_CONFIG}" "${CD_KERNEL_GIT_ROOT}/rpi-kernel/.config" || cd_die
      eend 0
    fi
    eend 0

    if [ ! -z "${CD_KERNEL_MENU}" ]; then
      ebegin "Running menuconfig for kernel in ${CD_KERNEL_GIT_ROOT}/rpi-kernel"
      ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make menuconfig || cd_die
      eend 0
    fi

    ebegin "Building kernel in ${CD_KERNEL_GIT_ROOT}/rpi-kernel"
    pushd "${CD_KERNEL_GIT_ROOT}/rpi-kernel"
    ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make $(cd_portageq "${CD_TARGET_DIR}" envvar MAKEOPTS) Image modules dtbs || cd_die
    popd
    eend 0

    ebegin "Installing kernel from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/boot/"
    if [ "${CD_KERNEL_ARCH}" == "arm" ]; then
      cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/Image" "${CD_TARGET_DIR}/boot/kernel7.img" || cd_die
    fi
    if [ "${CD_KERNEL_ARCH}" == "arm64" ]; then
      cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/Image" "${CD_TARGET_DIR}/boot/kernel8.img" || cd_die
    fi
    eend 0

    ebegin "Installing kernel modules from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/lib"
    pushd "${CD_KERNEL_GIT_ROOT}/rpi-kernel"
    ARCH=${CD_KERNEL_ARCH} CROSS_COMPILE=${CD_TARGET}- make $(cd_portageq "${CD_TARGET_DIR}" envvar MAKEOPTS) modules_install INSTALL_MOD_PATH="${CD_TARGET_DIR}"
    popd
    eend 0

    if [ "${CD_USE_DTB}" == "upstream" ]; then
      ebegin "Installing upstream dtb files from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/boot/"
      case ${CD_USE_RPI} in
        *0w*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-0-w.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *0*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *1*+)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *1*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *2*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-2-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *3*+)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-3-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *3*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-3-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *4*)
        cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/broadcom"/bcm*-rpi-4-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *)
        ewarn "No upstream dtb files for ${CD_KERNEL_ARCH} and ${CD_USE_RPI} found, unknown RPi"
        ;;
      esac
      eend 0

      ebegin "Installing upstream overlay files from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/boot/"
      cp -a ${CD_NODEBUG:--v} "${CD_KERNEL_GIT_ROOT}/rpi-kernel/arch/${CD_KERNEL_ARCH}/boot/dts/overlays"/* "${CD_TARGET_DIR}/boot/overlays" || cd_die
      eend 0
    else
      einfo "Not installing upstream dtb files"
    fi

  fi

  if [ ! -d "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" ]; then
    ebegin "Cloning firmware repository to ${CD_FIRMWARE_GIT_ROOT}/rpi-firmware (${CD_FIRMWARE_GIT_BRANCH})"
    mkdir -p ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}" || cd_die
    git clone --single-branch --branch "${CD_FIRMWARE_GIT_BRANCH}" --depth=1 https://github.com/raspberrypi/firmware.git "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" || cd_die
    eend 0
  fi
  if [ -d "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" ]; then
    ebegin "Cleaning firmware repository in ${CD_FIRMWARE_GIT_ROOT}/rpi-firmware (${CD_FIRMWARE_GIT_BRANCH})"
    git --git-dir="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/.git" --work-tree="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" clean -d -x -f || cd_die
    git --git-dir="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/.git" --work-tree="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" reset --hard ${CD_FIRMWARE_GIT_BRANCH} || cd_die
    eend 0

    ebegin "Updating firmware repository in ${CD_FIRMWARE_GIT_ROOT}/rpi-firmware (${CD_FIRMWARE_GIT_BRANCH})"
    git --git-dir="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/.git" --work-tree="${CD_FIRMWARE_GIT_ROOT}/rpi-firmware" pull || cd_die
    eend 0

    ebegin "Installing firmware from ${CD_FIRMWARE_GIT_ROOT}/rpi-firmware to ${CD_TARGET_DIR}/boot/"
    cp -ra ${CD_NODEBUG:--v} "${CD_TMP_DIR}"/rpi-firmware/boot/{COPYING.linux,LICENCE.broadcom,bootcode.bin,start*,fixup*} "${CD_TARGET_DIR}/boot/" || cd_die
    eend 0

    if [ "${CD_USE_DTB}" == "downstream" ]; then
      ebegin "Installing downstream dtb files from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/boot/"
      case ${CD_USE_RPI} in
        *0w*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-0-w.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *0*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *1*+)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *1*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *2*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-2-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *3*+)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-3-b-plus.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *3*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-3-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *4*)
        cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot"/bcm*-rpi-4-b.dtb "${CD_TARGET_DIR}/boot" || cd_die
        ;;
        *)
        ewarn "No upstream dtb files for ${CD_KERNEL_ARCH} and ${CD_USE_RPI} found, unknown RPi"
        ;;
      esac
      eend 0

      ebegin "Installing downstream overlay files from ${CD_KERNEL_GIT_ROOT}/rpi-kernel to ${CD_TARGET_DIR}/boot/"
      cp -a ${CD_NODEBUG:--v} "${CD_FIRMWARE_GIT_ROOT}/rpi-firmware/boot/overlays"/* "${CD_TARGET_DIR}/boot/overlays" || cd_die
      eend 0
    else
      einfo "Not installing downstream dtb files"
    fi

  fi

else 
  eerror "Target dir ${CD_TARGET_DIR} does not exist, cannot install kernel, firmware and boot files"
fi
