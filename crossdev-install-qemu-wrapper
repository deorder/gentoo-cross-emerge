#!/bin/bash

CD_QEMU_ARGS=()

CD_CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

source "${CD_CUR_DIR}/crossdev-functions.sh"

cd_parse_arguments $@

cd_parse_extra_arguments() {

  while (( ${#1} )); do
    case ${1} in
      *-cd-qemu-arch=*)
      CD_QEMU_ARCH="${1#*=}"
      ;;
      *-cd-qemu-arch)
      shift; CD_QEMU_ARCH=${1}
      ;;
      *-cd-use-rpi1)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("arm1176")
      ;;
      *-cd-use-rpi2)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a7")
      ;;
      *-cd-use-rpi3)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a53")
      ;;
      *-cd-use-rpi4)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a72")
      ;;
      --)
      shift;
      while (( ${#@} )); do
        CD_QEMU_ARGS+=(${1})
        shift
      done
      break
      ;;
      *)
      CD_QEMU_ARGS+=(${1})
      ;;
    esac
    shift
  done

  if [[ ! -z "${CD_QEMU_ARCH}" ]]; then
    einfo "Using qemu arch: ${CD_QEMU_ARCH}";
  else
    eerror "No qemu arch specified, use --cd-qemu-arch";
    CD_HELP=1
  fi

}

cd_parse_extra_arguments "${CD_ARGS[@]}"

if [[ ! -z "${CD_HELP}" ]]; then
  cd_print_usage_header
  echo "--cd-use-rpi1 (Use RPi1 equivalent CPU for wrapper)"
  echo "--cd-use-rpi2 (Use RPi2 equivalent CPU for wrapper)"
  echo "--cd-use-rpi3 (Use RPi3 equivalent CPU for wrapper)"
  echo "--cd-use-rpi4 (Use RPi4 equivalent CPU for wrapper)"
  echo "--cd-qemu-arch (Architecture part of user emulation binary)"
  exit 1
fi

# Source: https://github.com/qemu/qemu/blob/master/scripts/qemu-binfmt-conf.sh

i386_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x03\x00'
i386_mask='\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
i386_family=i386

i486_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x06\x00'
i486_mask='\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
i486_family=i386

x86_64_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x3e\x00'
x86_64_mask='\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
x86_64_family=i386

alpha_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x26\x90'
alpha_mask='\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
alpha_family=alpha

arm_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00'
arm_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
arm_family=arm

armeb_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28'
armeb_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
armeb_family=armeb

sparc_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x02'
sparc_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
sparc_family=sparc

sparc32plus_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x12'
sparc32plus_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
sparc32plus_family=sparc

ppc_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x14'
ppc_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
ppc_family=ppc

ppc64_magic='\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x15'
ppc64_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
ppc64_family=ppc

ppc64le_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x15\x00'
ppc64le_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\x00'
ppc64le_family=ppcle

m68k_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x04'
m68k_mask='\xff\xff\xff\xff\xff\xff\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
m68k_family=m68k

mips_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08'
mips_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
mips_family=mips

mipsel_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00'
mipsel_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
mipsel_family=mips

mipsn32_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08'
mipsn32_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
mipsn32_family=mips

mipsn32el_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00'
mipsn32el_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
mipsn32el_family=mips

mips64_magic='\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08'
mips64_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
mips64_family=mips

mips64el_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x08\x00'
mips64el_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
mips64el_family=mips

sh4_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x2a\x00'
sh4_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
sh4_family=sh4

sh4eb_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x2a'
sh4eb_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
sh4eb_family=sh4

s390x_magic='\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x16'
s390x_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
s390x_family=s390x

aarch64_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00'
aarch64_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
aarch64_family=arm

aarch64_be_magic='\x7fELF\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7'
aarch64_be_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
aarch64_be_family=armeb

hppa_magic='\x7f\x45\x4c\x46\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x0f'
hppa_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
hppa_family=hppa

riscv32_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xf3\x00'
riscv32_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
riscv32_family=riscv

riscv64_magic='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xf3\x00'
riscv64_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
riscv64_family=riscv

xtensa_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x5e\x00'
xtensa_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
xtensa_family=xtensa

xtensaeb_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x5e'
xtensaeb_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
xtensaeb_family=xtensaeb

microblaze_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xba\xab'
microblaze_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
microblaze_family=microblaze

microblazeel_magic='\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xab\xba'
microblazeel_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'
microblazeel_family=microblazeel

or1k_magic='\x7fELF\x01\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x5c'
or1k_mask='\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff'
or1k_family=or1k

if [ -d "${CD_TARGET_DIR}" ]; then
  if [ -f "/usr/bin/qemu-${CD_QEMU_ARCH}" ]; then

    if [ ! -f "${CD_CONFIG_DIR}/qemu-wrapper-${CD_TARGET}.c" ]; then
      CD_QEMU_WRAPPER_SRC_FILE="${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
      ebegin "Installing qemu user emulation in ${CD_TARGET_DIR} for ${CD_QEMU_ARCH}"
cat << EOF > "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
#include <stdio.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char **argv, char **envp) {
char *newargv[argc + ${#CD_QEMU_ARGS[@]} + 1];
newargv[0] = argv[0];
EOF

for INDEX in "${!CD_QEMU_ARGS[@]}"; do
echo "newargv[${INDEX} + 1] = \"${CD_QEMU_ARGS[${INDEX}]}\";" >> "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
done

cat << EOF >> "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
memcpy(&newargv[${#CD_QEMU_ARGS[@]} + 1], &argv[1], sizeof(*argv) * (argc - 1));
newargv[argc + ${#CD_QEMU_ARGS[@]}] = NULL;
return execve("/usr/bin/qemu-${CD_QEMU_ARCH}-real", newargv, envp);
}
EOF
    else
      CD_QEMU_WRAPPER_SRC_FILE="${CD_CONFIG_DIR}/qemu-wrapper-${CD_TARGET}.c"
      ebegin "Installing qemu user emulation in ${CD_TARGET_DIR} for ${CD_QEMU_ARCH} using a custom wrapper"
    fi

    cp -a "/usr/bin/qemu-${CD_QEMU_ARCH}" "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}-real" || cd_die
    gcc -static "${CD_QEMU_WRAPPER_SRC_FILE}" -O3 -s -o "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}" || cd_die
    cp -a "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}" "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}" || cd_die
    chmod 755 "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}" || cd_die
    eend 0

    ebegin "Register qemu user emulation binfmt /usr/bin/qemu-${CD_QEMU_ARCH} for ${CD_QEMU_ARCH}"
    CD_QEMU_MASK_VAR="${CD_QEMU_ARCH}_mask"; CD_QEMU_MAGIC_VAR="${CD_QEMU_ARCH}_magic"
    echo ":qemu-${CD_QEMU_ARCH}:M::${!CD_QEMU_MAGIC_VAR}:${!CD_QEMU_MASK_VAR}:/usr/bin/qemu-${CD_QEMU_ARCH}:" > /proc/sys/fs/binfmt_misc/register 2> /dev/null
    eend 0

  else
    eerror "No qemu user emulation binary for ${CD_TARGET} found, rebuild qemu with USE=\"qemu_user_targets_${CD_QEMU_ARCH}\""
  fi
else 
  eerror "Target dir ${CD_TARGET_DIR} does not exist, cannot install qemu user emulation"
fi
