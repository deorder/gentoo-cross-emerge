#!/bin/bash

CD_QEMU_ARGS=()

CD_CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

source "${CD_CUR_DIR}/crossdev-functions.sh"

cd_parse_arguments $@

cd_parse_extra_arguments() {

  while (( ${#1} )); do
    case ${1} in
      --cd-qemu-arch)
      shift; CD_QEMU_ARCH=${1}
      ;;
      --cd-use-rpi1)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("arm1176")
      ;;
      --cd-use-rpi2)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a7")
      ;;
      --cd-use-rpi3)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a53")
      ;;
      --cd-use-rpi4)
      CD_QEMU_ARGS+=("-cpu")
      CD_QEMU_ARGS+=("cortex-a72")
      ;;
      --)
      shift;
      while (( ${#@} )); do
        CD_QEMU_ARGS+=(${1})
        shift
      done
      break
      ;;
      *)
      CD_QEMU_ARGS+=(${1})
      ;;
    esac
    shift
  done

  if [[ ! -z "${CD_QEMU_ARCH}" ]]; then
    einfo "Using qemu arch: ${CD_QEMU_ARCH}";
  else
    eerror "No qemu arch specified, use --cd-qemu-arch";
    CD_HELP=1
  fi

}

cd_parse_extra_arguments "${CD_ARGS[@]}"

if [[ ! -z "${CD_HELP}" ]]; then
  cd_print_usage_header
  echo "--cd-use-rpi1 (Use RPi1 equivalent CPU for wrapper)"
  echo "--cd-use-rpi2 (Use RPi2 equivalent CPU for wrapper)"
  echo "--cd-use-rpi3 (Use RPi3 equivalent CPU for wrapper)"
  echo "--cd-use-rpi4 (Use RPi4 equivalent CPU for wrapper)"
  echo "--cd-qemu-arch (Architecture part of user emulation binary)"
  exit 1
fi

if [ -d "${CD_TARGET_DIR}" ]; then
  if [ -f "/usr/bin/qemu-${CD_QEMU_ARCH}" ]; then
    if [ ! -f "${CD_CONFIG_DIR}/qemu-wrapper-${CD_TARGET}.c" ]; then
      CD_QEMU_WRAPPER_SRC_FILE="${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
      ebegin "Installing qemu user emulation in ${CD_TARGET_DIR} for ${CD_QEMU_ARCH}"
cat << EOF > "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
#include <stdio.h>
#include <string.h>
#include <unistd.h>

int main(int argc, char **argv, char **envp) {
char *newargv[argc + ${#CD_QEMU_ARGS[@]} + 1];
newargv[0] = argv[0];
EOF

for INDEX in "${!CD_QEMU_ARGS[@]}"; do
echo "newargv[${INDEX} + 1] = \"${CD_QEMU_ARGS[${INDEX}]}\";" >> "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
done

cat << EOF >> "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}.c"
memcpy(&newargv[${#CD_QEMU_ARGS[@]} + 1], &argv[1], sizeof(*argv) * (argc - 1));
newargv[argc + ${#CD_QEMU_ARGS[@]}] = NULL;
return execve("/usr/bin/qemu-${CD_QEMU_ARCH}-real", newargv, envp);
}
EOF
    else
      CD_QEMU_WRAPPER_SRC_FILE="${CD_CONFIG_DIR}/qemu-wrapper-${CD_TARGET}.c"
      ebegin "Installing qemu user emulation in ${CD_TARGET_DIR} for ${CD_QEMU_ARCH} using a custom wrapper"
    fi
    cp -a "/usr/bin/qemu-${CD_QEMU_ARCH}" "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}-real" || cd_die
    gcc -static "${CD_QEMU_WRAPPER_SRC_FILE}" -O3 -s -o "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}" || cd_die
    cp -a "${CD_TMP_DIR}/qemu-wrapper-${CD_TARGET}" "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}" || cd_die
    chmod 755 "${CD_TARGET_DIR}/usr/bin/qemu-${CD_QEMU_ARCH}" || cd_die
    rm -f "${CD_QEMU_WRAPPER_SRC_FILE}" || cd_die
    eend 0
  else
    eerror "No qemu user emulation binary for ${CD_TARGET} found, rebuild qemu with USE=\"qemu_user_targets_${CD_QEMU_ARCH}\""
  fi
else 
  eerror "Target dir ${CD_TARGET_DIR} does not exist, cannot install qemu user emulation"
fi
